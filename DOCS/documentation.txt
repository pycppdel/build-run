Documentation about build & run.

Build & run provides an engine as well as an compiler, which can interpret a
script written in the simple language Plain.

Contents of a .plain file:

--------------------------
|                        | -> Section .include:
|                        |                     Sectiond for include libraries of the game, other files or just simple configuration data
|                        |
|                        | -> Section .config:
|                        |                     Section for configuration data needed for your Project
|                        |
|                        | -> Section .data // optional:
|                        |                    Section for declaring all variables needed
|                        |
|                        | -> Section .code:
|                        |                  Section for the code
|                        |
|                        |
|                        |
|                        |
--------------------------

Interaction in between Sections like configuring .config stuff of the game in the .code Section
is not supported, can be achieved however by opening up the needed Section
by typing:

Section .[NAME]
 //stuff
Section end


A Lot of stuff needs to be coordinated inside the game engine, therefore
there are libraries to deal with them.


LIBRARIES with a +(.) are included from the beginning of the file

        LIBRARIES
       -----------

 +(.)Engine
 +(.)Compiler
 +(.)ExeMaker

    STANDARD_LIBRARIES
   --------------------

 (.)Save
 +(.)KeyboardInput
 +(.)MouseInput
 +(.)Events
 +(.)Image
 (.)Time #for delaying execution or simple time functions
 +(.)Objects
 (.)GravityObjects
 (.)Music
 (.)Fullscreen
 (.)Algorithms #algorithms for gravity usw.
 (.)UserAlgorithms #algorithms the user can use in his program

Including the libraries that are not initially loaded needs to be done in the .include Section


Syntax:

.include "PATH" || <NameOfLibrary>


Construction of the Project:

Build&run
|
|
|-Compiler
| |
| |xxx
|
|-Libraries
| |
| |-xxx
|
|xxx


Starting a Project:

You can start a Project simply by opening a text editor and writing the appropriate Syntax of Plain
and saving it. After that comes the Compilation Process.

First, the compiler checks the file for any spelling errors and generates an AST.


It redeclares definitions and reinterprets them in program code, which will be stored in a dictionary of all needed Data,
that will be passed to the Pythonizer operator.
Before that, it fetches all the included files that are declared to be fetched in, and reinterprets them as well.

The Pythonizer tool reinterprets all the written code, and writes it in an outfile.
the two files that you can choose from are a .py program, a .exe or a linux executable, depending on
where you are runnning this program
